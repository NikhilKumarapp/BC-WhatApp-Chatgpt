name: Business Central Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      appVersion:
        description: 'App Version (e.g., 1.0.0)'
        required: true
      tag:
        description: 'Custom Tag (optional)'
        required: false
      releaseNotes:
        description: 'Release Notes (optional)'
        required: false

env:
  APP_FILE: 'AppSource/**/app.json'

jobs:
  validate-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup AL Environment
        uses: microsoft/AL-Go-Actions/setup@v1
        with:
          version: 'latest'

      - name: Validate App.json
        id: validate_app
        run: |
          if [ ! -f "$APP_FILE" ]; then
            echo "::error::App.json file not found at $APP_FILE"
            exit 1
          fi
          
          echo "App.json content:"
          cat $APP_FILE
          
          version=$(jq -r '.version' $APP_FILE)
          if [ -z "$version" ]; then
            echo "::error::Could not read version from App.json"
            exit 1
          fi
          
          echo "APP_VERSION=$version" >> $GITHUB_ENV
          echo "Using version: $version"

      - name: Set Release Parameters
        id: set_params
        run: |
          # Use input version or fallback to App.json version
          APP_VERSION="${{ github.event.inputs.appVersion || env.APP_VERSION }}"
          
          # Validate version format (SemVer)
          if [[ ! $APP_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format. Use Semantic Versioning (e.g., 1.0.0)"
            exit 1
          fi
          
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          
          # Generate tag name
          if [[ -z "${{ github.event.inputs.tag }}" ]]; then
            RELEASE_TAG="v$APP_VERSION"
          else
            RELEASE_TAG="${{ github.event.inputs.tag }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          
          # Set release notes
          RELEASE_NOTES="${{ github.event.inputs.releaseNotes || 'Business Central App Release' }}"
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          
          echo "Release parameters set:"
          echo "Version: $APP_VERSION"
          echo "Tag: $RELEASE_TAG"
          echo "Notes: $RELEASE_NOTES"

      - name: Clean Previous Release
        run: |
          # Delete local tag if exists
          git tag -d "${{ env.RELEASE_TAG }}" 2>/dev/null || true
          
          # Delete remote tag if exists
          if git ls-remote --tags origin "${{ env.RELEASE_TAG }}" | grep -q "${{ env.RELEASE_TAG }}"; then
            echo "Deleting existing tag ${{ env.RELEASE_TAG }}..."
            git push origin ":refs/tags/${{ env.RELEASE_TAG }}" || \
              echo "::warning::Failed to delete remote tag (may not exist)"
          else
            echo "Tag ${{ env.RELEASE_TAG }} doesn't exist yet"
          fi

      - name: Build AL App
        run: |
          echo "Building AL application..."
          alc /project:${{ github.workspace }} /packagecachepath:${{ github.workspace }}/.alpackages

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: "Version ${{ env.APP_VERSION }}"
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Upload App Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/**/*.app
          asset_name: "BusinessCentralApp_${{ env.APP_VERSION }}.app"
          asset_content_type: application/octet-stream

      - name: Verify Release
        run: |
          echo "Release created successfully:"
          echo "Version: ${{ env.APP_VERSION }}"
          echo "Tag: ${{ env.RELEASE_TAG }}"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
